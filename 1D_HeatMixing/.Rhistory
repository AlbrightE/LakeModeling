startTime = 1
endTime = hydrodynamic_timestep
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = His,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
res$temp[,-1]
res$average[-1,]
res$temp
res$average
startTime
endTime
endTime/dt
res$temp[,-ncol(res$temp)])
res$temp[,-ncol(res$temp)]
res$average[-nrow(res$average),]
#                         area = hyps_all[[1]], # area
#                         depth = hyps_all[[2]], # depth
#                         volume = hyps_all[[3]], # volume
#                         daily_meteo = meteo_all[[1]],
#                         secview = meteo_all[[2]],
#                         Cd = 0.0008)
# temp <-cbind(temp, res$temp)
# avgtemp <- rbind(avgtemp, res$average)
# diff <-cbind(diff, res$diff)
# running the model
hydrodynamic_timestep = 24 * 3600
total_runtime <- 365
temp <- matrx(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrx(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
remove('res')
res
#                         area = hyps_all[[1]], # area
#                         depth = hyps_all[[2]], # depth
#                         volume = hyps_all[[3]], # volume
#                         daily_meteo = meteo_all[[1]],
#                         secview = meteo_all[[2]],
#                         Cd = 0.0008)
# temp <-cbind(temp, res$temp)
# avgtemp <- rbind(avgtemp, res$average)
# diff <-cbind(diff, res$diff)
# running the model
hydrodynamic_timestep = 24 * 3600
total_runtime <- 365
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep
ice = res$iceflag
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[,startTime:(endTime/dt -1)] =  res$temp[,-ncol(res$temp)]
avgtemp[startTime:(endTime/dt -1),] <- res$average[-nrow(res$average),]
}
temp
temp[,startTime:(endTime/dt -1)]
str(temp)
startTime:(endTime/dt -1)
startTime:(endTime/dt -1)
startTime
(startTime/dt)
(startTime/dt):(endTime/dt -1)
max(1, (startTime/dt))
#                         area = hyps_all[[1]], # area
#                         depth = hyps_all[[2]], # depth
#                         volume = hyps_all[[3]], # volume
#                         daily_meteo = meteo_all[[1]],
#                         secview = meteo_all[[2]],
#                         Cd = 0.0008)
# temp <-cbind(temp, res$temp)
# avgtemp <- rbind(avgtemp, res$average)
# diff <-cbind(diff, res$diff)
# running the model
hydrodynamic_timestep = 24 * 3600
total_runtime <- 365
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep
ice = res$iceflag
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, max(1, (startTime/dt)):(endTime/dt -1)] =  res$temp[,-ncol(res$temp)]
avgtemp[ max(1, (startTime/dt)):(endTime/dt -1),] <- res$average[-nrow(res$average),]
}
max(1, (startTime/dt)):(endTime/dt -1)
res$temp[,-ncol(res$temp)]
str(res$temp[,-ncol(res$temp)])
max(1, (startTime/dt)):(endTime/dt -1)
length(max(1, (startTime/dt)):(endTime/dt -1))
temp[, max(1, (startTime/dt)):(endTime/dt -1)] =  res$temp[,-ncol(res$temp)]
avgtemp[ max(1, (startTime/dt)):(endTime/dt -1),] <- res$average[-nrow(res$average),]
length( max(1, (startTime/dt)):(endTime/dt -1))
str(res$average[-nrow(res$average),])
max(1, (startTime/dt)):(endTime/dt -1)
avgtemp[ max(1, (startTime/dt)):(endTime/dt -1),]
str(avgtemp)
as.matrix( res$average[-nrow(res$average),])
#                         area = hyps_all[[1]], # area
#                         depth = hyps_all[[2]], # depth
#                         volume = hyps_all[[3]], # volume
#                         daily_meteo = meteo_all[[1]],
#                         secview = meteo_all[[2]],
#                         Cd = 0.0008)
# temp <-cbind(temp, res$temp)
# avgtemp <- rbind(avgtemp, res$average)
# diff <-cbind(diff, res$diff)
# running the model
hydrodynamic_timestep = 24 * 3600
total_runtime <- 365
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep
ice = res$iceflag
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, max(1, (startTime/dt)):(endTime/dt -1)] =  res$temp[,-ncol(res$temp)]
avgtemp[ max(1, (startTime/dt)):(endTime/dt -1),] <- as.matrix(res$average[-nrow(res$average),])
}
# plotting for checking model output and performance
plot(seq(1, ncol(temp))*dt/24/3600, temp[1,], col = 'red', type = 'l',
xlab = 'Time (d)', ylab='Temperature (degC)', ylim=c(-1,35), lwd = 2)
for (i in 2:nx){
lines(seq(1, ncol(temp))*dt/24/3600, temp[i,],
lty = 'dashed',lwd =2)
}
time =  seq(1, ncol(temp), 1)
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
avgtemp
time
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, stratFlag)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
theme_minimal()
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
ggplot(m.df, aes((time), as.numeric(variable))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-2,35),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth') +
labs(fill = 'Temp [degC]')+
scale_y_reverse()
#' Created on Thu Aug 19 11:29:34 2021
#'
#' @author: Robert Ladwig
#' @email: rladwig2@wisc.edu
## remove everything from workspace
rm(list = ls())
# set wd to current dir of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## colors for plotting
library(tidyverse)
library(RColorBrewer)
library(patchwork)
source('1D_HeatMixing_functions.R')
## lake configurations
zmax = 25 # maximum lake depth
nx = 25 # number of layers we will have
dt = 3600 # 24 hours times 60 min/hour times 60 seconds/min
dx = zmax/nx # spatial step
## area and depth values of our lake
hyps_all <- get_hypsography(hypsofile = 'bc/LakeEnsemblR_bathymetry_standard.csv',
dx = dx, nx = nx)
## atmospheric boundary conditions
meteo_all <- provide_meteorology(meteofile = 'bc/LakeEnsemblR_meteo_standard.csv',
secchifile = 'bc/light.csv',
windfactor = 0.8)
## here we define our initial profile
u_ini <- initial_profile(initfile = 'bc/obs.txt', nx = nx, dx = dx,
depth = hyps_all[[3]],
processed_meteo = meteo_all[[1]])
### EXAMPLE RUNS
# 1 day
# res <- run_thermalmodel(u = u,
#                         startTime = 1,
#                         endTime = 24*3600,
#                         kd_light = 0.15,
#                         zmax = zmax,
#                         nx = nx,
#                         dt = dt,
#                         dx = dx,
#                         area = hyps_all[[1]], # area
#                         depth = hyps_all[[2]], # depth
#                         volume = hyps_all[[3]], # volume
#                         daily_meteo = meteo_all[[1]],
#                         secview = meteo_all[[2]],
#                         Cd = 0.0008)
# temp <-cbind(temp, res$temp)
# avgtemp <- rbind(avgtemp, res$average)
# diff <-cbind(diff, res$diff)
# running the model
hydrodynamic_timestep = 24 * 3600
total_runtime <- 365
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep
ice = res$iceflag
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, max(1, (startTime/dt)):(endTime/dt -1)] =  res$temp[,-ncol(res$temp)]
avgtemp[ max(1, (startTime/dt)):(endTime/dt -1),] <- as.matrix(res$average[-nrow(res$average),])
}
# plotting for checking model output and performance
plot(seq(1, ncol(temp))*dt/24/3600, temp[1,], col = 'red', type = 'l',
xlab = 'Time (d)', ylab='Temperature (degC)', ylim=c(-1,35), lwd = 2)
for (i in 2:nx){
lines(seq(1, ncol(temp))*dt/24/3600, temp[i,],
lty = 'dashed',lwd =2)
}
time =  seq(1, ncol(temp), 1)
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, stratFlag)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
theme_minimal()
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
ggplot(m.df, aes((time), as.numeric(variable))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-2,35),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth') +
labs(fill = 'Temp [degC]')+
scale_y_reverse()
as.matrix(res$average[-nrow(res$average),])
as.matrix(res$average)
(res$average)
res$average$time <- as.POSIXct(res$average$time)
res$average$time <- as.POSIXct(res$average$time, origin ='1970-01-01')
res$average$time
meteo_all
meteo_all[[1]]$datetime[1]
startingDate <- meteo_all[[1]]$datetime[1]
res$average$time <- as.POSIXct(res$average$time, origin =startingDate)
res$average$time <-
res$average$time
startingDate
res$average$time <- as.POSIXct(res$average$time, origin =startingDate)
res$average$time
average <- res$average
average <- res$average
average$time <- as.POSIXct(average$time, origin =startingDate)
average$time
startingDate
average$time
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = NULL,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
average <- res$average
average$time <- as.POSIXct(average$time, origin =startingDate)
average$time
average$Date <- as.Date(average$time, "%m/%d/%Y")
average$Date
average
averageTemps <- aggregate(epi ~ Date, average, stat)
averageTemps
average$Date
res$average %>%
mutate(datetime = as.POSIXct(average$time, origin =startingDate),
Date <- as.Date(average$datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise(mean)
res$average %>%
mutate(datetime = as.POSIXct(average$time, origin =startingDate),
Date <- as.Date(average$datetime, "%m/%d/%Y")) %>%
group_by(Date)
res$average %>%
mutate(datetime = as.POSIXct(average$time, origin =startingDate),
Date <- as.Date(average$datetime, "%m/%d/%Y"))
res$average
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date <- as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise(mean)
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date <- as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date <- as.Date(datetime, "%m/%d/%Y"))
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
average <- res$average[-nrow(res$average),] %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
average

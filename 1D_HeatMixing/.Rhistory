}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, max(1, (startTime/dt)):((endTime/dt))] =  res$temp
max(1, (startTime/dt)):((endTime/dt))
### EXAMPLE RUNS
hydrodynamic_timestep = 24 * dt
total_runtime <- 365
startingDate <- meteo_all[[1]]$datetime[1]
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
## run C-P-O2 model with input from ''average''
## derive kd value and put this in as input for ''run_thermalmodel'', e.g.
## '' kd <- 0.5 '' and then change L 59 to '' kd_light = kd ''
}
startingDate + avgtemp$time
avgtemp
startingDate + avgtemp[,1]
duplicated(startingDate + avgtemp[,1])
sum(duplicated(startingDate + avgtemp[,1]))
tail(startingDate + avgtemp[,1])
tail(avgtemp)
365*24*3600
365*24*3600/3600
which(duplicated(startingDate + avgtemp[,1]))
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
time =  seq(1, ncol(temp), 1)
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, stratFlag)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
theme_minimal()
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
ggplot(m.df, aes((time), as.numeric(variable))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-2,35),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth') +
labs(fill = 'Temp [degC]')+
scale_y_reverse()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
scale_y_reverse() +
theme_minimal()
average
hydrodynamic_timestep = 24 * dt
total_runtime <- 365
startingDate <- meteo_all[[1]]$datetime[1]
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
i=1
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
average <- res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
average
i=2
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
average
res$average
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate)
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, format = "%m/%d/%Y"))
i=1
hydrodynamic_timestep = 24 * dt
total_runtime <- 365
startingDate <- meteo_all[[1]]$datetime[1]
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
res$average %>%
mutate(datetime = as.POSIXct(time, origin =startingDate),
Date = as.Date(datetime, format = "%m/%d/%Y"))
average <- res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y"))
i=2
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
group_by(Date) %>%
summarise_all(mean)
res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y"))
summarise_all
average
average <- res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
# group_by(datetime) %>%
summarise_all(mean)
average
average <- res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
# group_by(datetime) %>%
summarise_all(mean)
average
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
geom_line(aes(time, stratFlag)) +
scale_y_reverse() +
theme_minimal()
time =  seq(1, ncol(temp), 1)
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, stratFlag)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
geom_line(aes(time, stratFlag)) +
scale_y_reverse() +
theme_minimal()
### EXAMPLE RUNS
hydrodynamic_timestep = 24 * dt
total_runtime <- 365
startingDate <- meteo_all[[1]]$datetime[1]
temp <- matrix(NA, ncol = total_runtime * hydrodynamic_timestep/ dt,
nrow = nx)
avgtemp <- matrix(NA, ncol = 6,
nrow = total_runtime * hydrodynamic_timestep/ dt)
if (exists('res')) {remove('res')}
for (i in 1:total_runtime){
if (exists('res')){
u = res$temp[, ncol(res$temp)]
startTime = res$endtime
endTime =  res$endtime + hydrodynamic_timestep -1
ice = res$icefla
Hi = res$icethickness
iceT = res$icemovAvg
supercooled = res$supercooled
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt))
} else {
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
}
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
temp[, matrix_range] =  res$temp
avgtemp[matrix_range,] <- as.matrix(res$average)
average <- res$average %>%
mutate(datetime = as.POSIXct(startingDate + time),
Date = as.Date(datetime, format = "%m/%d/%Y")) %>%
# group_by(datetime) %>%
summarise_all(mean)
## run C-P-O2 model with input from ''average''
## derive kd value and put this in as input for ''run_thermalmodel'', e.g.
## '' kd <- 0.5 '' and then change L 59 to '' kd_light = kd ''
}
# plotting for checking model output and performance
plot(seq(1, ncol(temp))*dt/24/3600, temp[1,], col = 'red', type = 'l',
xlab = 'Time (d)', ylab='Temperature (degC)', ylim=c(-1,35), lwd = 2)
for (i in 2:nx){
lines(seq(1, ncol(temp))*dt/24/3600, temp[i,],
lty = 'dashed',lwd =2)
}
time =  seq(1, ncol(temp), 1)
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
ggplot(avgtemp) +
geom_line(aes(time, epi, col = 'epilimnion')) +
geom_line(aes(time, hyp, col = 'hypolimnion')) +
geom_line(aes(time, tot, col = 'total')) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, stratFlag)) +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
geom_line(aes(time, stratFlag, col = stratFlag)) +
scale_y_reverse() +
theme_minimal()
ggplot(avgtemp) +
geom_line(aes(time, thermoclineDep)) +
geom_line(aes(time, stratFlag, col = as.factor(stratFlag))) +
scale_y_reverse() +
theme_minimal()
u = u_ini
startTime = 1
endTime = hydrodynamic_timestep - 1
ice = FALSE
Hi = 0
iceT = 6
supercooled = 0
kd_light = NULL
matrix_range = max(1, (startTime/dt)):((endTime/dt)+1)
endTime
res <-  run_thermalmodel(u = u,
startTime = startTime,
endTime =  endTime * 365,
ice = ice,
Hi = Hi,
iceT = iceT,
supercooled = supercooled,
kd_light = kd_light,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo_all[[1]],
secview = meteo_all[[2]],
Cd = 0.0008)
str(res)
